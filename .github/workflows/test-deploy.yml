name: test-deploy

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7.6
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Prepare database
        run: |
          python manage.py makemigrations
          python manage.py migrate --noinput
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test
        run: |
          python manage.py test
          echo ${{github.ref}}

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pyconkr
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: pyconkr
          image: ${{ steps.build-image.outputs.image }}
        if: github.ref == 'refs/heads/master'

      - name: Deploy Amazon ECS task definition into PROD
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: app
          cluster: pyconkr
          wait-for-service-stability: true
        if: github.ref == 'refs/heads/master'

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-dev
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-dev.json
          container-name: pyconkr
          image: ${{ steps.build-image.outputs.image }}
        if: github.ref == 'refs/heads/develop'

      - name: Deploy Amazon ECS task definition into STAGE
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-dev.outputs.task-definition }}
          service: app
          cluster: pyconkr-dev
          wait-for-service-stability: true
        if: github.ref == 'refs/heads/develop'
